from datetime import datetime
from decimal import Decimal
from bson import ObjectId
from pydantic import BaseModel

# Define a custom PyObjectId type if needed
class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v):
        if isinstance(v, ObjectId):
            return cls(str(v))
        raise ValueError("Invalid ObjectId")

    def __repr__(self):
        return f"<PyObjectId {self}>"

class BookModel(BaseModel):
    id: PyObjectId
    title: str
    author: str
    published_date: datetime
    isbn: str

    class Config:
        json_encoders = {
            PyObjectId: str,  # Convert PyObjectId to string
            datetime: lambda v: v.isoformat(),  # Convert datetime to ISO 8601 string
            Decimal: lambda v: float(v),  # Convert Decimal to float
        }
